openapi: 3.0.3
info:
  version: 1.0.0
  title: movie-rating-service
  license:
    name: MIT
servers:
  - url: http://localhost:8080
    description: localhost

security:
  - bearerAuth: []

paths:
  /api/v1/movies:
    get:
      operationId: getMovies
      summary: Get Movies
      description: Endpoint to retrieve a paginated list of movies
      tags:
        - Movie
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: pageNumber
          required: false
          schema:
            type: integer
            default: 0
          description: Page number (zero-based)
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          description: Number of items per page
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: Filter movies by name (case-insensitive, partial match)
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponseDto'
          description: Successfully retrieved the list of movies

  /api/v1/movies/{movieId}/ratings:
    post:
      operationId: rateMovie
      summary: Rate a movie
      description: Endpoint to rate a movie with a value between 1 and 10
      tags:
        - Movie
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: integer
          description: ID of the movie to rate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateMovieRequestDto'
      responses:
        "200":
          description: Movie rated successfully
    delete:
      operationId: deleteMovieRating
      summary: Delete a movie rating
      description: Endpoint to delete a rating for a specific movie
      tags:
        - Movie
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: integer
          description: ID of the movie to delete rating for
      responses:
        "200":
          description: Movie rating deleted successfully

  /api/v1/users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      description: Endpoint to register a new user
      tags:
        - User
      security: [ ]  # No authentication required for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequestDto'
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request - Invalid input data
        "409":
          description: Conflict - Username or email already exists
  /api/v1/movies/top-rated:
    get:
      operationId: getTopRatedMovies
      summary: Get Top Rated Movies
      description: Endpoint to retrieve a list of top rated movies
      tags:
        - Movie
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 100
          description: Number of top rated movies to return
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponseDto'
          description: Successfully retrieved the list of top rated movies
  
  /api/v1/auth/login:
    post:
      operationId: login
      summary: Authenticate user
      description: Endpoint to authenticate user and receive JWT token
      tags:
        - Authentication
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseDto'
        "401":
          description: Authentication failed
        "400":
          description: Bad request - Invalid input data

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme
  schemas:
    PaginationInfoDto:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          default: 10
          minimum: 0
          maximum: 100
        totalRecords:
          type: integer
          example: 1
      required: [ "pageNumber", "pageSize", "totalRecords" ]
    CreateMovieRequestDto:
      type: object
      properties:
        name:
          type: string
          example: "The Shawshank Redemption"
      required:
        - name
    MovieDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "The Shawshank Redemption"
        ratingCount:
          type: integer
          description: "Number of ratings the movie has received"
        averageRating:
          type: string
          format: number
          description: "Average rating of the movie"
    MovieListResponseDto:
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/MovieDto'
        paginationInfo:
          $ref: '#/components/schemas/PaginationInfoDto'
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "Password123!"
      required: [ "email", "password" ]
    TokenResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          description: "Token expiration time in seconds"
          example: 3600
      required: [ "accessToken", "tokenType", "expiresIn" ]
    RegisterUserRequestDto:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "Password123!"
          minLength: 8
          maxLength: 100
          description: "Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character"
      required: ["email", "password"]
    RateMovieRequestDto:
      type: object
      properties:
        value:
          type: integer
          minimum: 1
          maximum: 10
          example: 8
      required: [ "value" ]
