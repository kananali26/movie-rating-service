openapi: 3.0.3
info:
  version: 1.0.0
  title: movie-rating-service
  license:
    name: MIT
servers:
  - url: http://localhost:8080
    description: localhost

security:
  - bearerAuth: []

paths:
  /api/v1/movies:
    get:
      operationId: getMovies
      summary: Get Movies
      description: Endpoint to retrieve a paginated list of movies
      tags:
        - Movie
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: pageNumber
          required: false
          schema:
            type: integer
            default: 0
          description: Page number (zero-based)
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          description: Number of items per page
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: Filter movies by name (case-insensitive, partial match)
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieListResponseDto'
          description: Successfully retrieved the list of movies
  /api/v1/users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      description: Endpoint to register a new user
      tags:
        - User
      security: [ ]  # No authentication required for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequestDto'
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request - Invalid input data
        "409":
          description: Conflict - Username or email already exists

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme
  schemas:
    PaginationInfoDto:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          default: 10
          minimum: 0
          maximum: 100
        totalRecords:
          type: integer
          example: 1
      required: [ "pageNumber", "pageSize", "totalRecords" ]
    CreateMovieRequestDto:
      type: object
      properties:
        name:
          type: string
          example: "The Shawshank Redemption"
      required:
        - name
    MovieDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "The Shawshank Redemption"
    MovieListResponseDto:
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/MovieDto'
        paginationInfo:
          $ref: '#/components/schemas/PaginationInfoDto'
    RegisterUserRequestDto:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "Password123!"
          minLength: 8
          maxLength: 100
          description: "Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character"
      required: ["email", "password"]
